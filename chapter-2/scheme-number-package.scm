(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (= x y)))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put '=zero? '(scheme-number)
       (lambda (x)
         (= x 0)))
  (put 'raise 'scheme-number
       (lambda (x)
         (if (exact-integer? x)
             (make-rational x 1)
             (make-complex-from-real-imag x 0))))
  (put 'project 'scheme-number
       (lambda (x)
         (if (exact-integer? x)
             x
             (inexact->exact (round x)))))
  (put 'sine '(scheme-number)
       (lambda (x) (tag (sin x))))
  (put 'cosine '(scheme-number)
       (lambda (x) (tag (cos x))))
  (put 'g-atan '(scheme-number scheme-number)
       (lambda (x y) (tag (atan x y))))
  (put 'g-sqrt '(scheme-number)
       (lambda (x) (tag (sqrt x))))
  (put 'g-square '(scheme-number)
       (lambda (x) (tag (square x))))
   'done)

(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
